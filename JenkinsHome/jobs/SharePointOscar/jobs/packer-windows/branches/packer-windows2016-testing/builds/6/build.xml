<?xml version='1.0' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.10">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>sharepointoscar</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <jenkins.metrics.impl.TimeInQueueAction plugin="metrics@3.1.2.9">
      <queuingDurationMillis>12</queuingDurationMillis>
    </jenkins.metrics.impl.TimeInQueueAction>
    <jenkins.scm.api.SCMRevisionAction plugin="scm-api@2.1.1">
      <revision class="jenkins.plugins.git.AbstractGitSCMSource$SCMRevisionImpl" plugin="git@3.2.0">
        <head class="org.jenkinsci.plugins.github_branch_source.BranchSCMHead" plugin="github-branch-source@2.0.5">
          <name>packer-windows2016-testing</name>
        </head>
        <hash>e8bb0d5dbf342feb9fe7454cc391fde8733a0c5c</hash>
      </revision>
    </jenkins.scm.api.SCMRevisionAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.7">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.SyntheticStageGraphListener_-GraphListenerAction plugin="pipeline-model-definition@1.1.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@1.1.2">
      <stages plugin="pipeline-model-api@1.1.2">
        <stages>
          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            <name>Build</name>
            <branches>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                <name>default</name>
                <steps>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    <name>echo</name>
                    <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                      <arguments class="linked-hash-map">
                        <entry>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <key>message</key>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                            <value class="string">Building..</value>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                        </entry>
                      </arguments>
                    </args>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    <name>sh</name>
                    <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                      <arguments class="linked-hash-map">
                        <entry>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <key>script</key>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                            <value class="string">#!/usr/bin/env bash
# Script prerequisite &gt; install jq &gt; https://stedolan.github.io

cd ~

# Prerequisites
if [ &quot;$(uname)&quot; == &quot;Darwin&quot; ]; then
    brew install jq
# For Linux
elif [ &quot;$(expr substr $(uname -s) 1 5)&quot; == &quot;Linux&quot; ]; then
    sudo apt-get install --assume-yes jq
fi

# Get URLs for most recent versions
# For OS-X
if [ &quot;$(uname)&quot; == &quot;Darwin&quot; ]; then
    terraform_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{terraform}&apos; | egrep &quot;darwin.*64&quot; | sort -r | head -1 | awk -F[&quot;] &apos;{print $4}&apos;)
    packer_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{packer}&apos; | egrep &quot;darwin.*64&quot; | sort -r | head -1 | awk -F[&quot;] &apos;{print $4}&apos;)
# For Linux
elif [ &quot;$(expr substr $(uname -s) 1 5)&quot; == &quot;Linux&quot; ]; then
    terraform_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{terraform}&apos; | egrep &quot;linux.*64&quot; | sort -r | head -1 | awk -F[&quot;] &apos;{print $4}&apos;)
    packer_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{packer}&apos; | egrep &quot;linux.*64&quot; | sort -r | head -1 | awk -F[&quot;] &apos;{print $4}&apos;)
fi

# Create a move into directory.
cd
mkdir packer
mkdir terraform &amp;&amp; cd $_

# Download Terraform. URI: https://www.terraform.io/downloads.html
curl -o terraform.zip $terraform_url
# Unzip and install
unzip terraform.zip

# Change directory to Packer
cd ~/packer

# Download Packer. URI: https://www.packer.io/downloads.html
curl -o packer.zip $packer_url
# Unzip and install
unzip packer.zip

if [ &quot;$(uname)&quot; == &quot;Darwin&quot; ]; then
  echo &apos;
  # Terraform &amp; Packer Paths.
  export PATH=~/terraform/:~/packer/:$PATH
  &apos; &gt;&gt;~/.bash_profile

  source ~/.bash_profile
# For Linux
elif [ &quot;$(expr substr $(uname -s) 1 5)&quot; == &quot;Linux&quot; ]; then
  echo &apos;
  # Terraform &amp; Packer Paths.
  export PATH=~/terraform/:~/packer/:$PATH
  &apos; &gt;&gt;~/.bashrc

  source ~/.bashrc
fi</value>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                        </entry>
                      </arguments>
                    </args>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                </steps>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
            </branches>
          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            <name>Test</name>
            <branches>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                <name>default</name>
                <steps>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    <name>echo</name>
                    <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                      <arguments class="linked-hash-map">
                        <entry>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <key>message</key>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                            <value class="string">Testing..</value>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                        </entry>
                      </arguments>
                    </args>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                </steps>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
            </branches>
          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            <name>Deploy</name>
            <branches>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                <name>default</name>
                <steps>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    <name>echo</name>
                    <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                      <arguments class="linked-hash-map">
                        <entry>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <key>message</key>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                          <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                            <value class="string">Deploying....</value>
                          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-1>
                        </entry>
                      </arguments>
                    </args>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                </steps>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
            </branches>
          </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
        </stages>
      </stages>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <hudson.plugins.git.util.BuildData plugin="git@3.2.0">
      <buildsByBranchName>
        <entry>
          <string>packer-windows2016-testing</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@2.4.1">
              <sha1>e8bb0d5dbf342feb9fe7454cc391fde8733a0c5c</sha1>
              <branches class="singleton-set">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>packer-windows2016-testing</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>6</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/SharePointOscar/packer-windows.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <hudson.plugins.git.GitTagAction plugin="git@3.2.0">
      <tags class="hudson.util.CopyOnWriteMap$Tree">
        <entry>
          <string>packer-windows2016-testing</string>
          <list/>
        </entry>
      </tags>
      <ws>/var/jenkins_home/workspace/_packer-windows2016-testing-CT6RLZYBHPBT5SZ6RSXMNHMDQGFJNNEOIJPWGZHTEXWCQ4PKUN4A</ws>
    </hudson.plugins.git.GitTagAction>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@2.4">
      <revisionStates>
        <entry>
          <string>git https://github.com/SharePointOscar/packer-windows.git https://github.com/SharePointOscar/packer-windows.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
    <com.sonyericsson.rebuild.RebuildAction plugin="rebuild@1.25"/>
  </actions>
  <queueId>37</queueId>
  <timestamp>1496973858924</timestamp>
  <startTime>1496973858948</startTime>
  <result>FAILURE</result>
  <duration>17702</duration>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>pipeline {
  agent any
  stages {
    stage(&apos;Build&apos;) {
      steps {
        echo &apos;Building..&apos;
        sh &apos;&apos;&apos;#!/usr/bin/env bash
# Script prerequisite &gt; install jq &gt; https://stedolan.github.io

cd ~

# Prerequisites
if [ &quot;$(uname)&quot; == &quot;Darwin&quot; ]; then
    brew install jq
# For Linux
elif [ &quot;$(expr substr $(uname -s) 1 5)&quot; == &quot;Linux&quot; ]; then
    sudo apt-get install --assume-yes jq
fi

# Get URLs for most recent versions
# For OS-X
if [ &quot;$(uname)&quot; == &quot;Darwin&quot; ]; then
    terraform_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{terraform}&apos; | egrep &quot;darwin.*64&quot; | sort -r | head -1 | awk -F[\&quot;] &apos;{print $4}&apos;)
    packer_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{packer}&apos; | egrep &quot;darwin.*64&quot; | sort -r | head -1 | awk -F[\&quot;] &apos;{print $4}&apos;)
# For Linux
elif [ &quot;$(expr substr $(uname -s) 1 5)&quot; == &quot;Linux&quot; ]; then
    terraform_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{terraform}&apos; | egrep &quot;linux.*64&quot; | sort -r | head -1 | awk -F[\&quot;] &apos;{print $4}&apos;)
    packer_url=$(curl https://releases.hashicorp.com/index.json | jq &apos;{packer}&apos; | egrep &quot;linux.*64&quot; | sort -r | head -1 | awk -F[\&quot;] &apos;{print $4}&apos;)
fi

# Create a move into directory.
cd
mkdir packer
mkdir terraform &amp;&amp; cd $_

# Download Terraform. URI: https://www.terraform.io/downloads.html
curl -o terraform.zip $terraform_url
# Unzip and install
unzip terraform.zip

# Change directory to Packer
cd ~/packer

# Download Packer. URI: https://www.packer.io/downloads.html
curl -o packer.zip $packer_url
# Unzip and install
unzip packer.zip

if [ &quot;$(uname)&quot; == &quot;Darwin&quot; ]; then
  echo &apos;
  # Terraform &amp; Packer Paths.
  export PATH=~/terraform/:~/packer/:$PATH
  &apos; &gt;&gt;~/.bash_profile

  source ~/.bash_profile
# For Linux
elif [ &quot;$(expr substr $(uname -s) 1 5)&quot; == &quot;Linux&quot; ]; then
  echo &apos;
  # Terraform &amp; Packer Paths.
  export PATH=~/terraform/:~/packer/:$PATH
  &apos; &gt;&gt;~/.bashrc

  source ~/.bashrc
fi&apos;&apos;&apos;
      }
    }
    stage(&apos;Test&apos;) {
      steps {
        echo &apos;Testing..&apos;
      }
    }
    stage(&apos;Deploy&apos;) {
      steps {
        echo &apos;Deploying....&apos;
      }
    }
  }
}</script>
    <loadedScripts class="map"/>
    <sandbox>true</sandbox>
    <iota>26</iota>
    <head>1:26</head>
  </execution>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@3.2.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <name>origin</name>
            <refspec>+refs/heads/*:refs/remotes/origin/*</refspec>
            <url>https://github.com/SharePointOscar/packer-windows.git</url>
            <credentialsId>github</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
          <hudson.plugins.git.UserRemoteConfig>
            <name>origin</name>
            <refspec>+refs/pull/*/head:refs/remotes/origin/pr/*</refspec>
            <url>https://github.com/SharePointOscar/packer-windows.git</url>
            <credentialsId>github</credentialsId>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches class="singleton-list">
          <hudson.plugins.git.BranchSpec>
            <name>packer-windows2016-testing</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <browser class="hudson.plugins.git.browser.GithubWeb">
          <url>https://github.com/SharePointOscar/packer-windows</url>
        </browser>
        <submoduleCfg class="empty-list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.BuildChooserSetting>
            <buildChooser class="jenkins.plugins.git.AbstractGitSCMSource$SpecificRevisionBuildChooser">
              <revision reference="../../../../../../../actions/hudson.plugins.git.util.BuildData/buildsByBranchName/entry/hudson.plugins.git.util.Build/marked"/>
            </buildChooser>
          </hudson.plugins.git.extensions.impl.BuildChooserSetting>
        </extensions>
      </scm>
      <node></node>
      <workspace>/var/jenkins_home/workspace/_packer-windows2016-testing-CT6RLZYBHPBT5SZ6RSXMNHMDQGFJNNEOIJPWGZHTEXWCQ4PKUN4A</workspace>
      <changelogFile>/var/jenkins_home/jobs/SharePointOscar/jobs/packer-windows/branches/packer-windows2016-testing/builds/6/changelog0.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>